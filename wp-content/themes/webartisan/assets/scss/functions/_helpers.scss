@import "partials/screen-reader";


// **Mixins**
// clearfix
@mixin clearfix($side) {
    &:after {
        content: "";
        display: table;
        clear: $side;
    }
}
// Font
@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) {
    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
    @if $size {
        font-size: $size;
        font-size: calculateRem($size);
    }
    @if $colour {
        color: $colour;
    }
    @if $weight {
        font-weight: $weight;
    }
    @if $lh {
        line-height: $lh;
    }
}

// font inclusion
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
        url($file-name + '.woff') format('woff'),
        url($file-name + '.ttf') format('truetype'),
        url($file-name + '.svg##{$font-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

// margin-auto
@mixin margin-auto {
    margin: {
        left: auto;
        right: auto;
    }
}

// Pseudo elements
@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}

// flexbox

@mixin flexbox($direction: false, $wrap: false, $justify-content: false, $align-items: false, $align-content: false) {
    display: flex;
    @if ($direction) {
        flex-direction: $direction;
    }
    @if ($wrap) {
        flex-wrap: nowrap;
    }
    @if ($justify-content) {
        justify-content: flex-start;
    }
    @if ($align-items) {
        align-items: stretch;
    }
    @if ($align-content) {
        align-content: stretch;
    }
}

// Width
@mixin width($width, $max-width, $parent-width){
    width: calculatePercent($width, $parent-width);
    max-width: $max-width;
}